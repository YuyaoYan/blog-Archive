<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[基于Java的图片点选汉字验证码的实现，以及Js配置]]></title>
    <url>%2F2018%2F11%2F30%2Fcaptcha%2F</url>
    <content type="text"><![CDATA[前端运行效果图： 安全方面： 后端取随机背景图，随机汉字，随机位置，随机色值生成一张图传给前端 后端将随机生成的汉字传给前端 前端根据用户点击获取鼠标坐标，生成字符串，传给后端进行校验 代码片Jsp （随后附上H5代码片）12345678910111213141516171819202122232425262728&lt;!-- 图片点选汉字验证码 --&gt; &lt;section id="captcha_sec" class="input-container" style="display: none;" &gt; &lt;spring:message code="screen.welcome.label.captcha.accesskey" var="captchaAccessKey" /&gt; &lt;input type="hidden" id="captchaHidenInputPart" name="captcha" value="" /&gt; &lt;div style="width: 400px; height: 132px"&gt; &lt;img class="verify_img" id="testMouseImg" alt="&lt;spring:message code="captcha.required" /&gt;" onclick="this.src='captcha.jpg?'+Math.random()" src="captcha.jpg" style="float: right; width: 400px; height: 132px; margin-top: 0px; left: 0; position: relative; border-radius: 4px;" /&gt; &lt;/div&gt; &lt;div cssClass="required login_input_2 loginInput captcha " cssErrorClass="error" id="captcha" size="25" tabindex="2" path="captcha" class="select_by_order" accesskey="$&#123;captchaAccessKey&#125;" htmlEscape="true" autocomplete="off"&gt; &lt;/div&gt; &lt;div class="select_by_order required login_input_2 loginInput captcha" accesskey="screen.welcome.label.captcha.accesskey" style="border: 1px solid #DADADA; border-radius: 4px; display: block;" id="captcha"&gt; 请依次点击 &lt;span id="forMousePos"&gt;&lt;/span&gt; &lt;/div&gt; &lt;div class="select_by_order required login_input_2 loginInput captcha" style="border: 1px solid #DADADA; border-radius: 4px; display: none; background: #FFEEE1" id="selectFaildiv"&gt; &lt;i class="iconfont icon-cuowu-xiankuang" style="color: #FF0000"&gt; 校验失败，请重新校验&lt;/i&gt; &lt;/div&gt; &lt;div class="select_by_order required login_input_2 loginInput captcha" style="border: 1px solid #DADADA; border-radius: 4px; display: none; background: rgba(152,251,152,0.3)" id="selectSuccessdiv"&gt; &lt;i class="iconfont icon-zhengque" style="color: #3CB371"&gt; 校验通过&lt;/i&gt; &lt;/div&gt; &lt;/section&gt; js 前端获取坐标用了offset()函数。 之前用的client()。二者的区别是，offset()获取的是当前元素的坐标，从而不需考虑滚动的位移值。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113&lt;script type="text/javascript"&gt; $(document).ready(function () &#123; var tenantId = $("#tenantId").val(); var clientX, clientY, clientXY; var client = ''; var attach_url = ""; $.ajax(&#123; url: '', type: 'get', data: "tenant=" + tenantId, success: function (data, status) &#123; &#125;, fail: function (err, status) &#123; setDefaultImgsAndTitle(); &#125; &#125;); /* 返回汉字 */ $.ajax(&#123; url: '', type: 'get', success: function(subData)&#123; //根据后端要求选择不同的拼接方式 subData=" “" + subData.data.substr(0, 1) + "” “" + subData.data.substr(2, 1) + "” “" + subData.data.substr(4, 1) + "” “" + subData.data.substr(6, 1) + "”"; $("#forMousePos").text(subData); &#125;, fail: function(err,status)&#123; console.log() &#125; &#125;); /* jquery 获取鼠标坐标函数 */ function mousePos(e) &#123; var x, y; var e = e || window.event; return &#123; x: e.offsetX, y: e.offsetY &#125;; &#125;; var n = 0; $('#testMouseImg').on('click',function(e)&#123; offsetX = mousePos(e).x; offsetY = mousePos(e).y; offsetXY = offsetX + "-" + offsetY; coordinateToString(offsetXY); n++; $('#testMouseImg').html(n); if(n == 4)&#123; client = client.substring(0,client.length-1); /* 点击四次后传回坐标 */ $.ajax(&#123; url: '' + zzzz, type: 'get', success: function(data)&#123; if(data.status === "true")&#123; $("#captcha").val(client); $("#captcha").attr("value",client); $("#captchaHidenInputPart").attr("value",client); console.log('校验成功 ',data.status); $("#captcha").text("验证通过 " ); $("#selectSuccessdiv").css('display','block'); $("#captcha").css('display','none'); $("#selectFaildiv").css('display','none'); &#125; else &#123; console.log('校验失败 ',data.status); $("#captcha").css('display','none'); $("#selectFaildiv").css('display','block'); $("#selectSuccessdiv").css('display','none'); client = ''; n = 0; $.ajax(&#123; url: '', type: 'get', success: function()&#123; $('#testMouseImg').attr('src', '/cas/xxx.jpg'); &#125; &#125;); $.ajax(&#123; url: '', type: 'get', success: function(subData)&#123; console.log(subData); //根据后端要求选择不同的拼接方式 subData=" “" + subData.data.substr(0, 1) + "” “" + subData.data.substr(2, 1) + "” “" + subData.data.substr(4, 1) + "” “" + subData.data.substr(6, 1) + "”"; $("#forMousePos").text(subData.data); &#125;, &#125;); //设置定时器 setTimeout(function()&#123;selectFaild()&#125;, 1000); &#125; &#125;, /* fail */ &#125;); console.log(client); &#125; &#125;) function coordinateToString(xy)&#123; client = client + xy + "@"; &#125; function setTimer()&#123; setTimeout(selectFaild(), 1000); &#125; function selectFaild()&#123; $("#captcha").css('display','block'); $("#selectFaildiv").css('display','none'); &#125;&lt;/script&gt; JAVA 日志中打印出坐标，分别为：x, y, width, height 算法机制为： Java部分Github: https://github.com/YuyaoYan/captcha]]></content>
      <tags>
        <tag>java</tag>
        <tag>captcha</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS]]></title>
    <url>%2F2018%2F11%2F30%2Fcss%2F</url>
    <content type="text"><![CDATA[CSS1&lt;linkrel="stylesheet" type="text/css" href=""&gt; rel 要参照外部文档 type 文档类型 离文本越近的的样式，优先级越高。 如果放在下面，则会优先显示中的内容。如果此时&lt;pstytle=””&gt;，则显示中的style样式。 CSS语法： 单一元素的多个属性之间用分号分开，多个元素之间用逗号分开 若值为若干元素，则要给值加引号；除这种情况以外其他时候不加引号 样式的优先顺序： 设计者设计的样式&gt;浏览器用户自定义的样式&gt;浏览器自设的样式 强制优先级：！important 行内(内联)样式 内部样式：style中的样式 外部样式 层叠、继承、冲突 外观样式–比如字体、颜色可以继承；而布局有关的样式不可以继承，比如边框等 12 div中的html5p中的html5 //继承了的样式 ​ \5. 可以在同一个HTML文档内部引用多个外部样式表 6-4 常用选择器： 通用选择器：* 元素选择器：p{} id选择器：#id{} 类选择器： 12345&lt;h3 class="class1"&gt;h里的内容&lt;/h3&gt;&lt;p class="class1"&gt;p里的内容&lt;/p&gt;&lt;div class="class1 class2" id="div1"&gt;div里的内容&lt;/div&gt;.class1&#123;&#125;.class2&#123;&#125; 6-5 属性选择器 1input[value]&#123;background:green&#125; E[att] : E[att=”val”]：选择具有att属性且属性值等于val的E元素。进一步缩小选择范围，（只选择有特定属性值的元素。） E[att~=”val”]:选择具有att属性且属性值有多个，其中一个的值等于val的E元素。 E[att|=”val”]:选择具有att属性且属性值为以val开头并用连接符”-“分隔的字符串的E元素。 E[att^=”val”]:选择具有att属性且属性值为以val开头的字符串的E元素。 E[att$=”val”]:选择具有att属性且属性值为以val结尾的字符串的E元素。 E[att*=”val”]:选择具有att属性且属性值为包含val的字符串的E元素。 1234input[value][style]&#123;background: green&#125;input[value='vip1']&#123;background: red&#125;input[style~='15px']&#123;background: red&#125;p[lang|="en"]&#123;color: red&#125; 6-7 关系选择器 后代选择器(包含选择器)：ul li{} 12ul li&#123;color: red;border: 1px solid&#125;div p&#123;color: green&#125; 子元素选择器: 1ul&gt;li&#123;border:2px pink solid&#125; 相邻选择器： E+F:选择紧贴在E元素之后F元素。 h2+p{color:green} 兄弟选择器 E~F:选择E元素所有兄弟元素F。(只可以选择到之后的元素) h2~p{color:purple;} 6-8 伪元素选择器: E:first-letter/E::first-letter设置元素内的第一个字符的样式。 p::first-letter{font-size:30px} E:first-line/E::first-line设置元素内的第一行的样式。 p::first-line{color:red} E:before/E::before在每个E元素的内容之前插入内容。用来和content属性一起使用 E:after/E::after在每个E元素的内容之后插入内容。用来和content属性一起使用 a::before{ content: “click” } a::after{ content:url(jay50px.jpg); } E::selection设置对象被选择时的颜色。 p::selection{color:pink} 6-9 伪类选择器 E:first-child父元素的第一个子元素E。 li:first-child{color: green} //是li元素，也是第一个子元素 1ul&gt;li:first-child&#123;color: pink&#125; //也可以配合ul&gt;li使用 :root:选择文档的根元素（html就是根元素） :root{background:green} E:last-child:最后一个子元素E。 E:only-child:仅有的一个子元素E。 E:only-of-type:只有一种类型的子元素。 E:nth-child(n):匹配父元素的第n个子元素E。 12h3:nth-child(2)&#123;color: red&#125;#div1&gt;h3:nth-child(2)&#123;color: red&#125; E:nth-last-child(n):匹配父元素的倒数第n个子元素E。 E:first-of-type:匹配同类型中的第一个同级元素E。 E:last-of-type:匹配同类型中的最后一个同级元素E。 E:nth-of-type(n):匹配同类型中的第n个同级兄弟元素E。 E:nth-last-of-type(n):匹配同类型中的倒数第n个同级兄弟元素E。 E:empty:匹配没有任何子元素（包括text节点）的元素E。 12div:empty&#123;width: 500px; height: 100px;background: pink&#125;/* 与div的id无关，自动识别的,此时id设置为“111” */ 6-11 UI伪类及其他选择器 E:active向被激活的元素添加样式。 E:hover 当鼠标悬浮在元素上方时，向元素添加样式。 E:link向未被访问的链接添加样式 E:visited向已被访问的链接添加样式。 E:focus向拥有键盘输入焦点的元素添加样式。 E:lang向带有指定 lang 属性的元素添加样式。 input:checked选择每个被选中的input元素。 12input:checked&#123;background: red;width: 60px; height: 60px&#125;/* 当被选中的时候出现样式 */ input:disabled选择每个禁用的input元素 html: 1234&lt;p&gt; &lt;input type="password" name="password" id="password" placeholder="密码" disabled=""&gt; &lt;label for="password"&gt;密码&lt;/label&gt; &lt;/p&gt; css: 1input:disabled&#123;background: red&#125; input:enabled选择每个启用的input元素。 input:disabled选择每个禁用的input元素 #E:target选择当前活动的锚点元素。 在HTML页面的中添加 :not(E)选择E元素之外的每个元素。 :not(input){color:green} 6-13 选择器的优先级 原则上：元素选择器&lt;类选择器&lt;ID选择器&lt;行内样式 谁只想精确谁的优先级高 并列的话谁再后面谁的优先级高 6-14 三种颜色表示方式： 123#div1&#123;background: red&#125;#div2&#123;background: #ff8800&#125;#div3&#123;background: rgb(200,200,255);&#125; RGBA方式三原色配色方式 在RGB模式上新增了Alpha透明度。 1#div4&#123;background: rgba(150,10,0,0.1);&#125; //0-1：透明-不透明 HSL模式 语法:HSL(H,S,L)，HSL分别表示色调，饱和度，亮度 H:0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：0 - 360 S:(饱和度)。取值为：0.0% - 100.0% L:(亮度)。取值为：0.0% - 100.0% 1#div5&#123;background:hsl(125,50%,80%)&#125; HSLA模式 HSL模式上新增了Alpha透明度。 1#div6&#123;background:hsla(125,50%,80%,0.5);&#125; 6-16 font-size 规定文本的字体尺寸 通常使用px,百分比，em来设置字体的大小 123#div1&#123;font-size: 20px&#125;#div2&#123;font-size: 100%&#125;#div3&#123;font-size: 3em&#125; (em是css中的相对单位，是相对于当前对象内的字体尺寸，若没有制定文字大小尺寸，则为浏览器默认字体大小) xx-small、x-small、small、medium、large、x-large、xx-large把字体的尺寸设置为不同的尺寸，默认值：medium。 smaller把 font-size 设置为比父元素更小的尺寸。 arger 把font-size 设置为比父元素更大的尺寸。 1#div4&#123;font-size:xx-small;&#125; font-variant:规定是否以小型大写字母的字体显示文本。 normal默认值。浏览器会显示一个标准的字体。 small-caps浏览器会显示小型大写字母的字体。 font-style:规定文本的字体样式。 normal默认值。浏览器会显示一个标准的字体。 italic 浏览器会显示一个斜体的字体样式。 oblique浏览器会显示一个倾斜的字体样式。暂时不作讲解，了解即可 font-weight:规定字体的粗细。 normal默认值。定义标准的字符。 bold 定义粗体字符。 bolder定义更粗的字符。lighter 定义更细的字符。 100-900;定义由粗到细的字符。400 等同于 normal，而 700 等同于 bold。 123#div6&#123;font-variant: small-caps;&#125;#div7&#123;font-style: italic;&#125;#div8&#123;font-weight: 900;&#125; font-family:规定文本的字体系列。 1#dic9&#123;font-family: 隶属,楷体,微软雅黑;&#125;,微软雅黑;&#125; font:在一个声明中设置所有字体属性。 这个简写属性用于一次设置元素字体的两个或更多方面。 至少要指定字体大小和字体系列 可以按顺序设置如下属性：font-style/font-variant/font-weight/font-size/font-family 12font-size/font-family 这个必须要写#div10&#123;font:bold small-caps 50px 微软雅黑&#125; @font-face:嵌入字体 注：字体的设置还有其他几个很少的用到的属性，比如font-size-adjust为元素规定 aspect 值；font-stretch收缩或拉伸当前的字体系列。都很少用到或者多数浏览器不支持，就不作讲解 6-18 有字库(www.youziku.com) 6-19 文本属性–掌握 color 设置文本颜色 text-align 规定元素中的文本的水平对齐方式。 left 默认值/right/center/justify两端对齐 CSS3中新增了start和end属性值，在通常情况下，start相当于left，end相当于right line-height 设置行高。 normal/数字/百分比/px/em text-indent 设置文本的首行缩进 常用单位像素/百分比/em text-decoration 向文本添加修饰。 none 默认值。显示标准的文本。 underline 定义文本下划线。 overline 定义文本上划线。 line-through 定义穿过文本下的一条线。 blink 定义闪烁的文本。 CSS3中还有一些新增加的属性值但是目前浏览器多不支持，不再介绍 letter-spacing 设置字符间距。 定义字符间的固定空间 normal 默认。/像素：（允许使用负值） word-spacing 设置字/单词间距。 增加或减少单词间的空白 normal 就等同于设置为 0。/如果指定为长度值，会调整字之间的通常间隔；（允许使用负值）。 text-transform 设置对象中的文本的大小写 none默认。标准的文本。/capitalize每个单词以大写字母开头。/uppercase 转换为大写字母。/lowercase转换为小写字母 text-shadow 向文本添加阴影。 1text-shadow: 4px 4px 1pxrgba(255,0,0,0.6); //阴影透明 6-22 文本属性–熟悉 white-space 设置元素中空白的处理方式。 normal 默认。空白会被浏览器忽略 pre 空白会被浏览器保留。其行为方式类似 HTML 中的pre标签。 nowrap 文本不会换行，文本会在在同一行上继续，直到遇到br标签为止。 pre-wrap 保留空白符，但是正常地进行换行。 pre-line 合并空白符，但是正常地进行换行。 direction 设置文本方向 ltr默认。文本方向从左到右。/rtl 文本方向从右到左。 word-wrap 允许对长的不可分割的单词进行分割并换行到下一行。 normal默认值/break-word:在长单词或 URL 地址进行换行。 word-break 规定非中日韩文本的换行规则。 normal默认值/break-all：允许在单词内换行。/keep-all 只能在半角空格或连字符处换行。 text-fill-color 文本填充颜色，指定文字填充部分的颜色.目前多数浏览器不支持，暂不讲解。 text-stroke 文本边框颜色，指定文字描边部分的颜色。目前多数浏览器不支持，暂不讲解。 text-stroke-width文字的描边宽度 text-stroke-color文字的描边颜色 备注:使用该属性需要使用浏览器私有前缀 text-overflow 设置是否使用一个省略标记（…）标示对象内文本的溢出 clip：默认值当对象内文本溢出时不显示省略标记（…），而是将 溢出的部分裁切掉。 ellipsis：当对象内文本溢出时显示省略标记（…）。 温馨提示:该属性需要和over-flow:hidden属性、white-space:nowrap配合使用。 6-23 文本属性–了解 text-outline 规定文本的轮廓 text-justify 规定当 text-align 设置为 “justify” 时所使用的对齐方法。 text-align-last 设置如何对齐最后一行或紧挨着强制换行符之前的行。 text-emphasis 向元素的文本应用重点标记以及重点标记的前景色。 unicode-bidi 用于同一个页面里存在从不同方向读进的文本显示。与direction属性一起使用 normal/embed/bidi-override 不常用，了解即可 hanging-punctuation 规定标点字符是否位于线框之外。 punctuation-trim 规定是否对标点字符进行修剪。 tab-size:设定一个tab在页面中的显示长度 text-wrap 规定文本的换行规则。注释：目前主流浏览器都不支持 text-wrap 属性。 6-24 css3前缀 W3C标准 12 1234567#p2&#123; font-size: 50px; text-stroke:2px red; //这种写法防止有的浏览器识别有的浏览器不识别 text-fill-color:green; -webkit-text-stroke:2px red; //字体描边红色 -webkit-text-fill-color:green; //字体填充绿色&#125; 6-25 css盒模型 盒模型的概念： CSS 盒模型规定了处理元素内容、内边距、边框 和 外边距 的方式。 最内部分是元素内容，直接包围内容的是内边距。内边距呈现了元素的背景。内边距的边缘是边框。边框以外是外边距。 元素的尺寸: height 设置元素的高度。属性值：auto：默认。/px、cm 等单位定义高度。/百分比 width 设置元素的宽度属性值：auto：默认。/px、cm 等单位定义高度。/百分比 max-height 设置元素的最大高度。属性值：auto：默认。/px、cm 等单位定义高度。/百分比 max-width 设置元素的最大宽度。属性值：auto：默认。/px、cm 等单位定义高度。/百分比 这两个一般用于图片等的缩放限制 min-height 设置元素的最小高度。属性值：auto：默认。/px、cm 等单位定义高度。/百分比 min-width 设置元素的最小宽度。属性值：auto：默认。/px、cm 等单位定义高度。/百分比 当属性值用百分比时是相对于父元素的尺寸来说的。 最大最小宽高主要用于动态控制缩放等情况下，这里暂做了解。 padding 属性：元素的内边距: padding-top 属性设置元素的上内边距（空间）。 padding-right 属性设置元素右内边距（空白）。 padding-bottom 属性设置元素的下内边距（底部空白）。 padding-left 属性设置元素左内边距（空白）。 padding 属性接受长度值或百分比值，但不允许使用负值。 padding * 同时设定四个边距 padding ** 分别设定上下、左右边距 padding *** 分别设定上、左右、下边距 padding ** 分别设定上、右、下、左边距 p标签有自动换行的效果 border属性：元素的边框，是围绕元素内容和内边距的一条或多条线。 border属性： 可以按顺序设置如下属性： border-width border-style solid 定义实线。/dotted 定义点状边框/double 定义双线…… border-color 关于元素的边框后边课程还会详细讲解，暂时先简单了解。 1234*&#123; padding: 0px; margin:0px; &#125; //用通配符取消浏览器默认边距 12 margin 属性：元素的外边距: 围绕在元素边框的空白区域是外边距。设置外边距会在元素外创建额外的“空白”。 margin-top 属性设置元素的上外边距（空间）。 margin-right 属性设置元素外内边距（空白）。 margin-bottom 属性设置元素的下外边距（底部空白）。 margin-left 属性设置元素左外边距（空白）。 margin 属性接受长度值或百分比值，允许使用负值。 margin * 同时设定四个外边距 margin ** 分别设定上下、左右外边距 margin *** 分别设定上、左右、下外边距 margin ** 分别设定上、右、下、左外边距 123456#div1&#123; margin-bottom: 30px;&#125;#div2&#123; margin-top: 50px; &#125; //两个div的外边距会重叠，div之间的距离是外边距大的那个 外边距的合并 外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。 合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。 溢出的处理 overflow 如果内容溢出了元素内容区域，是否对内容的边缘进行裁剪。//对x、y同时生效，建议用以下两个 overflow-x 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。 overflow-y 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。 visible 不裁剪内容，可能会显示在内容框之外。 hidden 裁剪内容 - 不提供滚动机制。 scroll 裁剪内容 - 提供滚动机制。 auto 如果溢出框，则应该提供滚动机制。 1white-space: nowrap; //禁止换行 overflow-x: auto; 6-29 css定位 CSS定位的概念： CSS 定位属性允许对元素进行定位改变其在页面的位置。 CSS 有三种基本的定位机制：普通流、浮动和绝对定位。 普通流中的元素的位置由元素在HTML中的位置决定。 元素定位的属性： pos ition 把元素放置到一个静态的、相对的、绝对的、或固定的位置中。 static 默认值。没有定位。 absolute 绝对定位，相对于(static 定位以外的第一个) 父元素进行定位。通过绝对定位，元素可以放置到页面上的任何位置。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。(注：static 定位以外的第一个父元素：相对与最接近的一个最有定位设置的父级对象进行绝对定位，如果对象的父级没有设置定位属性，则依据 body 对象左上角作为参考进行定位。) ​ 且会占据标签的位置： ​ relative 相对定位，相对于其正常位置进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 fixed 绝对定位，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。 滚动时div位置不变 绝对定位和相对定位的区别 绝对定位对象可以层叠,相对定位的对象不可以 相对定位对象会占据它原来位置,绝对定位不会 top 定义了一个定位元素的上外边距边界与其包含块上边界之间的偏移。注：如果 “position” 属性的值为 “static”，那么设置 “top” 属性不会产生任何效果。 1top: -200px; // 距上边距200px right 定义了定位元素右外边距边界与其包含块右边界之间的偏移。注：如果 “position” 属性的值为 “static”，那么设置 “right” 属性不会产生任何效果。 bottom 定义了定位元素下外边距边界与其包含块下边界之间的偏移。注：如果 “position” 属性的值为 “static”，那么设置 “bottom” 属性不会产生任何效果。 left 定义了定位元素左外边距边界与其包含块左边界之间的偏移。注：如果 “position” 属性的值为 “static”，那么设置 “left” 属性不会产生任何效果。 clip 设置元素的形状。元素被剪入这个形状之中，然后显示出来。 语法 clip: rect(top, right, bottom, left);目前裁切形状只有矩形可以使用 rect()需要设置四个值：top, right, bottom和left。他们之间需要用逗号隔开，而且rect()属性值和margin、padding一样的标准，遵循顺时针旋转的规则。 注意：clip属性只能在元素设置了“position:absolute”或者“position:fixed”属性起作用。 auto：这是一个默认值，clip设置auto值和没有进行剪切是一样的效果; 1234img&#123;position: absolute; //auto等于没有裁剪clip: rect(50px,315px,200px,20px);&#125; vertical-align 设置元素的垂直对齐方式。 1display: inline-block; //在一行显示 baseline 默认。元素放置在父元素的基线上。 ​ 基线是红色的线 ​ top 把元素的顶端与行中最高元素的顶端对齐 vertical-align: top; middle 把此元素放置在父元素的中部。 bottom 把元素的底端与行中最低的元素的底端对齐。 数值（像素）/百分比 text-top 把元素的顶端与父元素字体的顶端对齐 text-bottom 把元素的底端与父元素字体的底端对齐。 sub 垂直对齐文本的下标。 super 垂直对齐文本的上标 z-index 设置元素的堆叠顺序。 overflow 设置当元素的内容溢出其区域时发生的事情。 ​ left 元素向左浮动。 right 元素向右浮动。 none 默认值。元素不浮动，并会显示在其在文本中出现的位置。 clear 浮动的清除：常用属性值 both/left/right/none 1clear: both; //两种浮动都清除 6-34 列表和表格 表格有关的属性： border-collapse 设置是否把表格边框合并为单一的边框.属性值：separate 默认值/collapse边框合并 123456 table&#123; /*默认值*/ border-collapse: separate; /*合并边框*/ border-collapse: collapse;&#125; border-spacing 设置分隔单元格边框的距离。 1234 table&#123; border-collapse: separate; border-spacing: 8px; //需要与 separate搭配使用&#125; caption-side 设置表格标题的位置。属性值：top 默认值,在表格之上。bottom 在表格之下。 empty-cells 设置是否显示表格中的空单元格。属性值：hide/show默认 table-layout 设置显示宽度是否随内容拉伸。属性值：auto默认/fixed 列宽由表格宽度和列宽度设定。 列表的属性： list-style 简写属性。用于把所有用于列表的属性设置于一个声明中。 list-style-type 设置列表项标志的类型。 none无标记。/disc默认,实心圆。/circle 标记是空心圆。/square实心方块。/ decimal 数字。/decimal-leading-zero 0开头的数字/lower-roman 小写罗马数字upper-roman 大写罗马数字/lower-alpha 小写英文字母/upper-alpha大写英文字母 ……日文、拉丁文等其他符合，有兴趣自己查CSS手册。 list-style-position 设置列表项标志的位置。属性值：inside/outside(默认值) list-style-image 将图象设置为列表项标志。属性值：URL 图像的路径。/none 默认。无图形被显示。 12list-style-image: url(../image/pen.jpg);list-style: circle inside url(../image/pen.jpg);]]></content>
      <tags>
        <tag>css</tag>
        <tag>fontend</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript基础]]></title>
    <url>%2F2018%2F11%2F30%2FjavaScript%2F</url>
    <content type="text"><![CDATA[7-1嵌入JavaScript代码的三种方式 写在 script 标签中 直接放在HTML标签中 123&lt;script&gt; document.write('djhfjdf');&lt;/script&gt; 以外部文档的方式连接到当前HTML文档中 1&lt;script type="text/javascript" src="7-1.js"&gt;&lt;/script&gt; 注意事项： 区分字母的大小写，Name和name是两个不同的标识符。 空格和换行。这一点和CSS代码规则类似:多余的空格会被忽略，可以将一行代码分成多行写。 分号作为一个语句的结束标志，分号之后是新语句的开始。虽然省略不写通常也是没有问题的，但还是建议大家写上。 代码的注释：单行注释和多行注释。 7-2document.write()的常用操作 document.write(‘矩形的长为：’+b+’,宽为：’+a+’,面积为:’+c+’\n’); 除了直接输出文字外，它还支持带有HTML标签的输出内容。 比如直接输出一个标题 比如在输出内容中加入br换行标签 比如直接输出列表项…… ……以后再详细介绍，暂时先了解这么多. alert()方法 alert()方法会输出一个对话框，在以后的课程中我们会经常用它进行测试，务必先了解它的用法。 可以添加多个alert();他们会按照顺序依次执行。 var x=10; alert(x); 可以验证变量的赋值是否正确 onclick事件的基本用法 onclick()事件是最常用的事件之一，所谓事件可以简单理解为用户的操作。 为了后续课程的学习，你应该先掌握着个简单事件的基本用法 7-3常量 常量是从始至终不能被改变的数据。比如: 数字 123 可以是常量，字符串 “hello” 也是一个常量…… 常量通常用来表示固定不变的量，比如圆周率，万有引力常量。 变量 变量的值是可以改变的，变量可以看做是存储数据的容器。比如一个瓶子，它既可以装入酱油、醋；也可以装入茅台和二锅头…… 在 JavaScript 中创建变量通常称为“声明”变量，使用关键字 var来声明变量。 向变量赋值，使用等号;可以在声明变量时对其赋值，也可以先声明后赋值。 可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可 数据类型 可以使用typeof(变量名)查询数据类型 数据类型包括:字符串、数字、布尔、数组、对象、Null、Undefined 数字 number: JavaScript 只有一种数字类型。数字可以带小数点，也可以不带： 字符串 string:字符串 是存储字符的变量。 布尔 boolen:只能有两个值：true 或 false。 数组 array: null 空值:可以通过将变量的值设置为 null 来清空变量。 object: 对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔。 Undefined 这个值表示变量不含有值或未声明。 温馨提示：注意事项 在一个HTML文档使用script标签嵌入多个JS语句的时候，这几个语句之间是相通的,或者说是有关联的。 命名规范(包括函数名，变量等): 必须以字母、下划线或者美元符号开始，不能使用特殊符号。 命名不能是系统的关键字：比如new ,if,class…… 区分大小写 命名最好用有意义的名称。比如说name,people…… 7-4数据类型​ 数据类型包括:字符串、数字、布尔、数组、对象、Null、Undefined ​ 关于数据类型的分类，不同书籍的分类方法有所不同，有的划分为复杂数据类型和简单数据类型，也有的划分为原始数据类型和复合数据类型； ​ 有的书籍将函数作为一种特殊的数据类型，有的认为函数不算是数据类型； ​ 本节课程的讲解将重点介绍数值和字符串，要求大家掌握；布尔型的演示涉及的后边章节内容，暂时要求了解；至于数组和对象，暂时先做简要了解，知道即可，将在后续章节做进一步的深入学习。 typeof运算符 typeof运算符可以查询数据类型 其返回可能值有:undefined,boolean,number,string、object以及function. 字符串型数据String：字符串是存储字符的变量。 常量字符串：如 “JavaScript”,’HTML5’ 变量字符串：如：var text=”HTML5视频教程” 可以使用”+”进行字符串的连接。 在JavaScript 中，字符串使用单引号或者双引号来起始或者结束。那么如何输出单引号或者双引号呢？就要用到转义字符 JavaScript中常用的转义字符 换行符：\n 回车符：\r 退格符:\b 反斜杠:\ 双引号:\” …… 温馨提示：部分转义字符在输出为HTML文档流时不发生作用。 数值型数据Number： JavaScript 只有一种数字类型。数字可以带小数点，也可以不带。 浮点数值的最高精度是17位小数，但是在进行算术计算时其精度远远不如整数。例如，0.1加0.2的结果不是0.3， 而是0.30000000000000004。这个舍入误差会导致无法测试特定的浮点数值。 极大或极小的数字可以通过科学（指数）计数法来书写：3e4 3.14e2就是3.14*100=314 数字可以写成十进制、八进制、十六进制。 八进制在js中表示是第一位一定要是0，后面就是八进制字数序列（0~7） 十六进制字面量前两位必须是0x,后面跟十六进制数字（0~9及A~F）。字母A~F不区分大小写。 温馨提示：科学（指数）计数法、八进制、十六进制表示的数字在输出时统统会转换成十进制。 布尔型数据Boolen: 布尔型数据boolen:只能有两个值：true 或 false。 var m=3; var n=5; alert(m&gt;n); // function alert(message?: any): void 弹出框显示为：false 将各种类型的值转化成Boolean类型的规则如下： Number:任意非0的数值为true,0值和NaN为”false”。 String:所有的非空字符串转化为 true; “”（空字符串）转化成false if(“…”){ alert(“布尔值为真”) }else{ alert(“布尔值为假”) } Object的任何对象都会转化为 true; 在javascript中，只要逻辑表达式不返回undefined不返回null，就都是真的。 Undefined 这是一个很有意思的数据类型，因为它的值只有一个，那就是undefined。 var m; alert(typeof m) 在申明变量时如果没有将变量赋值的话这个变量也是属于Undefined类型的。。 如果一个变量没有申明就直接去访问解释器会报错误信息，但是这样的变量如果使用typeof返回的结果也是”undefined”。 Null:空值 Null也是一个只有一个值得数据类型，它的值就是null，任何变量只要给其赋值为null的话这个变量的数据类型就是Null类型。 可以通过将变量的值设置为 null 来清空变量。 对象Object: 在javascript中，所有的对象都继承自Object对象（数组是特殊的对象，所以数据类型也是object）。 对象对于初学者来说不是很容易理解，在后续课程中再详细讲解，这里大家先记住有这种数据类型即可。 // 定义对象，通过.来访问 var person={name:’Yoyo’,age:’24’,id:’17127907’,VIP:’会员’} alert(person.age) 数组Array: 可以通过”.”来访问数组的元素。 数组元素的顺序从0开始 实例1： 1234567891011//鸡兔同笼&lt;script&gt; var head=35; var foot=94; varchicken=head-(foot-2*head)/2; var rabbit=(foot-2*head)/2; document.write('头的数量为:'+head+'&lt;br&gt;'); document.write('脚的数量为:'+foot+'&lt;br&gt;'); &lt;/script&gt;&lt;input type="button" name=""value="鸡的数量"onclick="document.write('计算鸡的数量为：'+chicken)"/&gt;&lt;input type="button" name=""value="兔的数量"onclick="alert('计算兔的数量为：'+rabbit)"/&gt; 7-10 运算符基本概念 表达式：由常量/变量和运算符组成的短语； 操作数：表达式中的常量和变量成为操作数； 运算符：表达式中起运算作用的符合成为运算符； 单目运算符：只能带一个操作数的成为单目运算符；(也叫一元运算符) 多目运算符：带多个操作数的成为多目运算符； 用于字符串的 + 运算符 + 运算符用于把文本值或字符串变量加起来（连接起来）。 要想在两个字符串之间增加空格，需要把空格插入一个字符串之中： 如果把数字与字符串相加，结果将成为字符串。 赋值运算符： 赋值运算符用于给 JavaScript 变量赋值。 =: x=y += x+=y 等价于 x=x+y -= x-=y 等价于 x=x-y = x=y 等价于 x=x*y /= x/=y 等价于 x=x/y %= x%=y 等价于 x=x%y 算术运算符 加减乘除：+ - * / 取模运算符：% 正负运算符：+ - 递增递减运算符：++ –:使数字递增/递减1(注意前置和后置的区别) 若没有赋值前置和后置，同。 若有赋值:前置则先计算递增/减后赋值，后置则相反。 比较运算符 比较运算符是比较两个数的大小的运算符，返回的是一个布尔值。 相等运算符 == ：判断两个操作数是否相等。不同的数据类型会自动转换为相等的数据类型再做比较。 等同运算符=== ：全等（值和类型），严格意义的相等，两个操作数的值和他们的类型必须完全一致。 不等于：!= 不等同运算符： !== 大于：&gt; 小于：&lt; 大于或等于：&gt;= 小于或等于：&lt;= 若一个是数值字符串，一个是数值，字符串会自动转换成数值进行比较。 若两个都是字符串，则比较首个数字的大小。 字母字符串会转换成对应的ASCII码(较少用到，不做讲解，知道即可) 布尔值的false和true会转换成0和1 逻辑运算符 逻辑运算符用于测定变量或值之间的逻辑。 &amp;&amp; and(与) || or(或) ! not(非) 条件运算符 根据条件在两个语句中执行其中的一个，使用符号 ？：语法如下： 条件表达式？语句1：语句2 参数说明： 条件表达式，结果会被作为布尔值处理 语句1：如果条件表达式返回true则执行 语句2：如果条件表达式返回false则执行 运算符优先级 运算符优先级描述了在计算表达式时执行运算的顺序。先执行具有较高优先级的运算，然后执行较低优先级的运算。例如，先执行相乘，再执行相加。 运算符比较多，可以合理使用()来改变表达式的优先级。 ()的用法和数学中的()用法相同,()内的会优先计算。 7-15控制语句基本概念 单行语句 复合语句 代码块 复合语句也会被当做一条语句来处理 if选择语句 条件语句用于基于不同的条件来执行不同的动作。 if() 语句 - 只有当指定条件为 true 时，使用该语句来执行代码 if()…else 语句 - 当条件为 true 时执行代码，当条件为 false 时执行其他代码 if()…else if()….else 语句 - 使用该语句来选择多个代码块之一来执行 if语句()中的表达式会自动转换成布尔值。 switch多条件选择语句 使用 switch语句来选择要执行的多个代码块之一。 语法： switch(n) { case 1: 执行代码块 1 break; case 2: 执行代码块 2 break; default: n 与 case 1 和 case 2不同时执行的代码 } 工作原理：首先设置表达式n（通常是一个变量）。 随后表达式的值会与结构中的每个 case的值做比较。 如果存在匹配，则与该 case关联的代码块会被执行。 请使用 break 来阻止代码自动地向下一个case 运行。 default关键词来规定匹配不存在时做的事情： for 循环语句 在编程中有些指令需要执行很多遍，这时候就要用到循环语句。 for 循环的语法： for (语句 1; 语句 2; 语句 3) { 被执行的代码块 } 语句 1 在循环（代码块）开始前执行 语句 2定义运行循环（代码块）的条件,如果语句 2 返回 true，则循环再次开始，如果返回 false，则循环将结束。 语句 3 在循环（代码块）已被执行之后执行 语句 1 是可选的，也就是说不使用语句 1也可以。 如果您省略了语句 2，那么必须在循环内提供break。否则循环就无法停下来。这样有可能令浏览器崩溃。 语句 3 也是可选的。 while循环 while循环在执行前测试一个条件，如果条件成立进入循环。 while 循环的语法： while(条表达式) { 语句组 } do-while循环 while循环在执行前测试一个条件，而do-while循环先执行循环，然后再测试条件成立与否。 while 循环的语法： do { 语句组 } while(条表达式) break和continue跳转语句 break将直接跳出并结束当前循环结构。 continue用于跳过循环中的一个迭代。 continue语句只能用在循环中；break只能用在循环或 switch 中。 其他控制语句 for/in - 循环遍历对象的属性，with、return语句等 九九乘法表 123456789&lt;script&gt; for(var i=1;i&lt;=7;i++)&#123; for(var j=1;j&lt;=i;j++)&#123; var str=i+"x"+j+"="+i*j+" "; document.write(str); &#125; document.write("&lt;br&gt;"); &#125;&lt;/script&gt; math.floor(x) //返回小于参数x的最大整数，即向下取整 7-22 函数基本概念 函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。 JavaScript 函数语法:函数就是包裹在花括号中的代码块： function 函数名() { 这里是要执行的代码 } 函数的声明和调用： 使用了关键词 function来声明函数 关键词function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。 函数本身不会自动运行，只有当调用该函数时，才会执行函数内的代码。 函数可以通过其名字加上括号中的参数进行调用 可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。 在调用函数时，您可以向其传递值，这些值被称为参数。带有参数的函数也被称为有参函数。 带有返回值的函数: 有时，我们会希望函数将值返回调用它的地方。通过使用 return 语句就可以实现。 在使用return 语句时，函数会停止执行，并返回指定的值。 function hs(){ return(‘返回值’); } hs(); alert(‘可以直接对返回值操作，比如输出它：’+hs()); 可以将返回值赋值给一个变量，然后对变量进行操作 当函数遇到第一个return后将终止执行函数后边的语句，直接跳出函数 var a=sum(3,5); arguments 对象: 在函数代码中，使用特殊对象 arguments存储函数调用传递给该函数的所以参数。 还可以用arguments 对象检测函数的参数个数，引用属性 arguments.length 即可。 arguments [0]表示函数的第一个参数，arguments [1]表示函数的第二个参数…… 通过arguments可以动态的添加参数。 实例三：函数在canvas中的应用 123456789101112131415161718&lt;body onload="draw()"&gt; &lt;canvas id="myCanvas" width="600px" height="300px" style="border:1pxsolid #c3c3c3;"&gt;&lt;/canvas&gt; &lt;script&gt; function draw()&#123; var c=document.getElementById("myCanvas"); var cxt=c.getContext("2d"); for(var i=0;i&lt;12;i++)&#123; for(var j=0;j&lt;24;j++)&#123; cxt.fillStyle='rgb(240,'+Math.floor(255-11.5*i)+','+Math.floor(255-11.5*j)+')'; cxt.beginPath(); cxt.arc(12.5+i*25,12.5+j*25,10,0,Math.PI*2,true); cxt.closePath(); cxt.fill(); &#125; &#125; &#125;&lt;/script&gt;&lt;/body&gt; 7-27 对象和数组对象:Object JavaScript 中的所有事物都是对象：字符串、数值、数组、函数… 对象是属性的集合，每个属性都有名字和值，对象可以通过属性的名字存取属性的值。 对象的属性既可以存放基本数据类型也可以存放其他对象的引用值或者函数的引用值，如果存储的是函数的的引用值则该属性称为方法 对象可以看做带有属性和方法的特殊数据类型。 对象包含两个基本要素：属性-值，也称作键-值/名-值;当属性值为方法时也称作：属性(字段)和方法(函数) 对象的创建方法 通过new运算符创建 new关键字可以省略 属性可以用引号包含也可以不用 1234567&lt;script&gt; // 先创建一个空的对象再赋值 var peo=new Object(); peo.name='songjiang'; peo.sex='man'; alert(peo.name);&lt;/script&gt; 1234567&lt;script&gt; // 先创建一个空的对象再赋值 var peo=&#123;&#125;; peo.name='songjiang'; peo.sex='man'; alert(peo.name);&lt;/script&gt; 12345678&lt;script&gt; //直接对创建的对象赋值 var peo=&#123; name:'songjiang'， sex:'male' &#125; alert(peo.name);&lt;/script&gt; 可以用点符号访问对象属性值也可以通过数组的方式，即用[“属性名称”] alert(peo[‘name’]); 可以使用delete运算符删除对象的属性。 delete peo.name; ​ //属性值为函数： function say(){ return(‘大师兄’); } var people={ sa:say } alert(people.sa()); 数组:Array 数组的声明(创建)方法: new关键字创建空数组 new关键字创建包含元素的数组 new关键字创建指定元素个数的数组 123456&lt;script&gt; var arr1=new Array(); var arr2=new Array('apple','banana','orange'); var arr3=new Array(4); alert(arr1);&lt;/script&gt; 也可以使用[]直接创建数组 var arr1=[]; var arr2=[‘apple’,’banana’,’orange’,1]; var arr3=[]; arr3[0]=’hha’; arr3[1]=’xx’; alert(arr3[0]); 可以使用length属性获取数组的长度;并且可以给一个数组赋值 alert(arr2.length); arr3.length=6; //给数组赋值长度为6 数组元素的基本操作 程序运行时通常需要读取数组中的数据，有时候需要对数据进行修改。 读取数据：可以使用索引查询获取数组元素和添加数组元素 添加数据：使用push方法将新元素添加到数组尾部. var fruit=new Array(‘苹果’,’putao’); fruit.push(‘taozi’); document.write(fruit); 删除数据：可以使用delete运算符删除指定的元素。 delete fruit[0]; 删除末尾元素(更新数据)pop()方法：该方法会返回删除的元素。 fruit.pop(); document.write(fruit.pop()); //打印该函数的返回值，即已删除的元素 删除顶端的元素 shift方法： 在数组顶端添加元素 unshift方法：返回值为新数组的长度，但不建议使用，IE会出错。 字符转换：toString方法将数组表示为字符串。 join方法输出数组元素。(输出结果会转换成字符串) //默认输出时，每个元素会用逗号隔开，jion()可以改变输出时的间隔方式 var fruit=newArray(‘苹果’,’putao’,’fdf’,’fddgdf’); document.write(fruit.join(‘-‘)+’‘); 数组逆序reverse：颠倒数组元素的顺序;返回值为逆序后的新数组。 fruit.reverse(); 数组排序 sort： 语法 数组名.sort(sortfunction) //两位数以上的数组元素会出错 sortfunction若省略，默认为从按照ASII字符顺序进行升序排列 sortfunction必须返回：正值、零、负值三者之一。赋值表示第一个值大于第二个值，负值反之，零则相等。 12345678910111213var fruit=new Array('1','36','21','88');document.write(fruit+'&lt;br&gt;');fruit.sort(sortFunction);document.write(fruit+'&lt;br&gt;');function sortFunction(ar1,ar2)&#123; if(ar1&gt;ar2)&#123; return -1; &#125;else if(ar1&lt;ar2)&#123; return 1; &#125;else&#123; return 0; &#125;&#125; 扩充数组 concat:将多个数组的元素合并为一个新的数组。 1234var fruit=fruit1.concat(fruit2)document.write(fruit+'&lt;br&gt;')//参数也可以是元素：var fruit=fruit1.concat('apples') splice方法：删除、替换、插入元素 会更改原数组 第一参数为起始位置索引 第二参数为切取元素个数 第三个参数为插入元素，可选项 切取数组的一段元素 slice： 1234567var fruit1=new Array('苹果','苹果','苹果','苹果');document.write(fruit1+'&lt;/br&gt;');var fruit2=fruit1.splice(1,2,'葡萄','梨');//varfruit2=fruit1.splice(1,2);document.write(fruit1+'&lt;/br&gt;');document.write(fruit2+'&lt;/br&gt;');//splice的返回值是被替换的元素，返回类型是object，即返回的两个元素新构成的数组的类型 切取部分作为新数组返回，不会对原数组改变。 第一参数为起始位置索引 第二参数为结束位置索引，注意区分splice 若省略第二个参数则直接切取到结尾 123456var fruit1=new Array('苹果1','苹果2','苹果3','苹果4','苹果5','苹果6','苹果7','苹果8');document.write(fruit1+'&lt;/br&gt;');var fruit2=fruit1.slice(1,4);document.write(fruit1+'&lt;/br&gt;');document.write(fruit2+'&lt;/br&gt;');//切取1-4，不包括4.slice不对原参数操作，返回切取出来的值；但splice对原数组进行操作，返回切取的值 in 运算符和for in循环语句 in 运算符用来检测对象中是否具有某一特定属性，通常用于遍历集合中的所有元素。 通常我们使用for/in 语句循环遍历对象的属性，在数组中可以遍历数组中的所有元素。 //for in循环在对象中的应用： 12345var person=&#123;name:"张三",age:25,ID:12345&#125;for (x in person)&#123; document.write('&lt;li&gt;'+person[x]+'&lt;br&gt;') //输出属性值 document.write('&lt;li&gt;'+x+'&lt;br&gt;') //输出属性&#125; 阶段练习n! 12345678var n=4;function rrr(n)&#123; if(n==1)&#123; return 2; &#125;else return rrr(n-1)*n; &#125;document.write(rrr(n)); 回文 Math.floor()可对浮点数取整 12 var i,a,b,c,d; var ss=new Array(); function aa(){ for(i=10;i&lt;=9999;i++){ d=i%10; c=Math.floor((i/10)%10); b=Math.floor((i/100)%10); a=Math.floor((i/1000)%10); ​ if((a==d&amp;&amp;b==c&amp;&amp;a!=0)||(a==0&amp;&amp;b==d)||(a==0&amp;&amp;b==0&amp;&amp;c==d)){ ss.push(i); } } } aa(); alert(ss.length); document.write(ss+’‘); 7-35 时间和日期基本概念 Date是JavaScript的内置对象，系统在Date对象中封装了与日期和时间相关的属性和方法。 Date使用UTC1970年1月1日0时开始经过的毫秒数来存储时间。 GMT 格林尼治时间 UTC 国际协调时间 创建Date对象四种方法： var date= new Date(); 无参数的情况下返回值为当前时间。 不同浏览器显示的时间格式会有细微差异 var date = new Date(milliseconds); var date = new Date(dateString); var date = new Date(year, month, day, hours, minutes, seconds, milliseconds); 1234var date1=new Date();var date2=new Date(21212645615312);var date3=new Date(2012,1,24);var date4=new Date(2012,1,24,10,10,10); 时间相关的两个方法(这两种方法了解一下就可以了)： Date.parse()返回1970年1月1日午夜到指定日期（字符串）的毫秒数。 Date.parse()参数支持的时间格式如下： 1/24/2016; January 24,2016； SunJan 24 2016 10:10:10 GMT+0800 格式不正确会返回NaN Date.UTC()根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。 Date.UTC()参数支持的时间格式如下： 2016,1(前两个参数是必须的); 2016,1,24,10,10,10 数值含义为年/月/日/时/分/秒；格式不正确会返回NaN 月份和日期是从0开始 注意UTC时间和时区的换算，如东八区和标准时间是八小时时差 Date实例相关的字符串表示方法(了解即可)： toSting()获取Date实例的字符串表示 toDateSting()获取Dater的日期部分字符串表示 toTimeSting()获取Dater的时间部分字符串表示 toLocaleString() 据本地时间格式，把 Date 对象转换为字符串。 toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串。 toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串。 valueOf():转换为毫秒数 Date 对象方法 通过使用针对日期对象的方法，我们可以很容易地对日期进行操作。重点掌握蓝色字体的内容，其他了解即可。 getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。 getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。 getFullYear() 从 Date 对象以四位数字返回年份。 getHours() 返回 Date 对象的小时 (0 ~ 23)。 getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。 getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。 getMonth() 从 Date 对象返回月份 (0 ~ 11)。 getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。 getTime() 返回 1970 年 1 月 1 日至今的毫秒数。 getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差 getUTCDate() 根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。 getUTCDay() 根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。 getUTCFullYear() 根据世界时从 Date 对象返回四位数的年份。 getUTCHours() 根据世界时返回 Date 对象的小时 (0 ~ 23)。 getUTCMilliseconds() 根据世界时返回 Date 对象的毫秒(0 ~ 999)。 getUTCMinutes() 根据世界时返回 Date 对象的分钟 (0 ~ 59)。 getUTCMonth() 根据世界时从 Date 对象返回月份 (0 ~ 11)。 getUTCSeconds() 根据世界时返回 Date 对象的秒钟 (0 ~ 59)。 parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数。 setDate() 设置 Date 对象中月的某一天 (1 ~ 31)。 setFullYear() 设置 Date 对象中的年份（四位数字）。 setHours() 设置 Date 对象中的小时 (0 ~ 23)。 setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999)。 setMinutes() 设置 Date 对象中的分钟 (0 ~ 59)。 setMonth() 设置 Date 对象中月份 (0 ~ 11)。 setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59)。 setTime() setTime() 方法以毫秒设置 Date 对象。 setUTCDate() 根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。 setUTCFullYear() 根据世界时设置 Date 对象中的年份（四位数字）。 setUTCHours() 根据世界时设置 Date 对象中的小时 (0 ~ 23)。 setUTCMilliseconds() 根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。 setUTCMinutes() 根据世界时设置 Date 对象中的分钟 (0 ~ 59)。 setUTCMonth() 根据世界时设置 Date 对象中的月份 (0 ~ 11)。 setUTCSeconds() setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。 toDateString() 把 Date 对象的日期部分转换为字符串。 toGMTString() 已废弃。请使用 toUTCString() 方法代替。 toISOString() 使用 ISO 标准返回字符串的日期格式。 toJSON() 以 JSON 数据格式返回日期字符串。 toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串。 toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串。 toLocaleString() 据本地时间格式，把 Date 对象转换为字符串。 toString() 把 Date 对象转换为字符串。 toTimeString() 把 Date 对象的时间部分转换为字符串。 toUTCString() 根据世界时，把 Date 对象转换为字符串。 UTC() 根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。 valueOf() 返回 Date 对象的原始值。 7-38 Math对象Math 对象 Math 对象用于执行数学任务。 Math 对象并不像 Date 和 String 那样是对象的类，因此没有构造函数 Math()。 算数值 JavaScript提供 8 种可被 Math 对象访问的算数值： Math.PI 返回圆周率（约等于3.14159）。 Math.E 返回算术常量 e，即自然对数的底数（约等于2.718）。 Math.SQRT2 返回 2 的平方根（约等于 1.414）。 Math.SQRT1_2 返回返回 1/2 的平方根（约等于 0.707）。 Math.LN2 返回 2 的自然对数（约等于0.693）。 Math.LN10 返回 10 的自然对数（约等于2.302）。 Math.LOG2E 返回以 2 为底的 e 的对数（约等于 1.443）。 Math.LOG10E 返回以 10 为底的 e 的对数（约等于0.434）。 数值取整 ceil(x) 对数进行上舍入。 floor(x) 对数进行下舍入。 round(x) 把数四舍五入为最接近的整数。 随机数 random() 返回 0 ~ 1 之间的随机数。 注意并不包括0和1 12345678//返回1-10,包括10for(var i=0;i&lt;10;i++)&#123; document.write(Math.floor(Math.random()*10+1)+"&lt;br&gt;");&#125;//返回2-10,包括10for(var i=0;i&lt;10;i++)&#123; document.write(Math.floor(Math.random()*9+2)+"&lt;br&gt;");&#125; 例： 1234567function selec(low,high)&#123; var ch=high-low+1; return Math.floor(Math.random()*ch+low);&#125; for(var i=0;i&lt;10;i++)&#123; document.write(selec(49,88)+"&lt;br&gt;");&#125; 三角函数 cos(x) 返回数的余弦。 alert(Math.cos(Math.PI/3)); //cos(这里是弧度) 1alert(Math.cos(Math.PI/3)); //cos(这里是弧度) acos(x) 返回 x 的反余弦值。 sin(x) 返回数的正弦。 asin(x) 返回 x 的反正弦值。 tan(x) 返回角的正切。 atan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。 其他方法 max(x,y) 返回 x 和 y 中的最高值。 min(x,y) 返回 x 和 y 中的最低值。 1var n=Math.min(1,8,6,3); 12 abs(x) 返回 x 的绝对值。 atan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。 exp(x) 返回 e 的指数。 log(x) 返回数的自然对数（底为e）。 pow(x,y) 返回 x 的 y 次幂。 valueOf() 返回 Math 对象的原始值。 7-40 字符串对象字符串对象 字符串是非常重要的数据类型，除了基本字符串外，JavaScript还提供了字符串的引用类型–字符串对象。 字符串对象提供了字符串检索、替换、连接等方法… 可以通过new 关键字创建字符串对象 var str=new String() length 属性返回字符串的长度(字符数)。 字符串与数字的转换 toString() 返回字符串。可以将数值转换成字符串。 如果需要获取数值的二进制、八进制、十六进制的字符串表示，则可以给toString()传递一个表示进制的的整数 parseInt()函数可以将字符串转换成整数 parseFloat()函数可以将字符串转换浮点数 Number()函数可以将任意类型的值转换数值。 字符串对象的常用方法 charAt() 返回在指定位置的字符。 charCodeAt() 返回在指定的位置的字符的 Unicode 编码。 concat() 连接字符串。 slice(n,m) 提取字符串n到m之间的片断(不包括m位置的字符串)，并在新的字符串中返回被提取的部分。 substring() 提取字符串中两个指定的索引号之间的字符。大多数情况和上一个作用相同，当参数为负值时会有不同，但这种情况较少用，不做讨论，有兴趣的话自己测试或查下资料 substr(n,m) 从起始索引号提取字符串中指定数目的字符。 split() 把字符串分割为字符串数组。 indexOf() 检索字符串,返回某个指定的字符串值在字符串中首次出现的位置。注意，如果查找不到会返回 -1 lastIndexOf() 从后向前搜索字符串。 123var str1="hello";var s1=str1.indexOf('a')alert(s1) lastIndexOf() 从后向前搜索字符串。 toLowerCase() 把字符串转换为小写。 toUpperCase() 把字符串转换为大写。 match() 找到一个或多个正则表达式的匹配。(正则表达式后续课程会讲) 该方法会返回一个数组，数组中包含了所有符合条件的文本。无则返回null replace() 替换与正则表达式匹配的子串，并返回替换后的字符串，注意原字符串不会改变 search() 检索与正则表达式相匹配的值。查找与参数模式相匹配的文本，并返回该文本的位置。若无则返回-1(indexOf()会返回-1).与indexOf()相似。 split() 把字符串分割为字符串数组。 …… 需要注意的是，JavaScript 的字符串是不可变的（immutable），String 类定义的方法都不能改变字符串的内容。像String.toUpperCase() 这样的方法，返回的是全新的字符串，而不是修改原始字符串。 阶段练习随机背景颜色： 12345678&lt;script&gt; var colors=['red','blue','yellow','purple','orange'] function acolor()&#123; var c=Math.floor(Math.random()*5) document.bgColor=colors[c]&#125;&lt;/script&gt;&lt;input type="button"value="更换背景颜色"onclick="acolor()"&gt;]]></content>
      <tags>
        <tag>fontend</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo Quick Start]]></title>
    <url>%2F2018%2F11%2F29%2FhexoQuickStart%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment 新建导航栏文件夹新建好后会自带index.md文件 1$ hexo new page categories 安装search12$ npm install hexo-generator-searchd --save$ npm install hexo-generator-searchdb --save 上传本地图片的插件在你的hexo目录下执行这样一句话1$ npm install hexo-asset-image --save 新建.md文档新建后会在_post文件夹中产生同名文件夹。1$ hexo n "xxx" xxx为xxx.md，执行该操作后产生xxx文件，该文件用来存放xxx.md中的图片。 hexo常用命令参见大佬博客 12345$ hexo n "我的博客" == hexo new "我的博客" #新建文章$ hexo p == hexo publish$ hexo g == hexo generate #生成$ hexo s == hexo server #启动服务预览$ hexo d == hexo deploy #部署 每次部署时依次执行123hexo cleanhexo g 然后在浏览器打开 localhost:4000 看下效果，如果没有问题的话，就执行以下命令，部署到网站。 1hexo d]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
